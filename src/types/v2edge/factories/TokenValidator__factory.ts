/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TokenValidator,
  TokenValidatorInterface,
} from "../TokenValidator";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_factoryV1",
        type: "address",
      },
      {
        internalType: "address",
        name: "_positionManager",
        type: "address",
      },
      {
        internalType: "address",
        name: "_refWalletFactory",
        type: "address",
      },
      {
        internalType: "address",
        name: "_checkValidation",
        type: "address",
      },
      {
        internalType: "address",
        name: "_JAMM_Token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "JAMM_Token",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
      {
        internalType: "address[]",
        name: "baseTokens",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "amountToBorrow",
        type: "uint256",
      },
    ],
    name: "batchValidate",
    outputs: [
      {
        internalType: "enum ITokenValidator.Status[]",
        name: "isFotResults",
        type: "uint8[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "checkValidation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "factoryV1",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "panaromaswapV1Call",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "positionManager",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "refWalletFactory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "baseTokens",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "amountToBorrow",
        type: "uint256",
      },
    ],
    name: "validate",
    outputs: [
      {
        internalType: "enum ITokenValidator.Status",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6101206040523480156200001257600080fd5b50604051620012323803806200123283398101604081905262000035916200008a565b6001600160601b0319606095861b811660805293851b841660a05291841b831660c052831b821660e05290911b1661010052620000f9565b80516001600160a01b03811681146200008557600080fd5b919050565b600080600080600060a08688031215620000a2578081fd5b620000ad866200006d565b9450620000bd602087016200006d565b9350620000cd604087016200006d565b9250620000dd606087016200006d565b9150620000ed608087016200006d565b90509295509295909350565b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c6110ea62000148600039806102135250806102375250806101cb5250806101ef5250806101a752506110ea6000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806395b035de1161005b57806395b035de146100db578063ac7fdd39146100e3578063be7672e5146100eb578063ef6c30c91461010b57610088565b80630143aace1461008d5780633957f453146100b65780635d414aad146100cb578063791b98bc146100d3575b600080fd5b6100a061009b366004610c1a565b610120565b6040516100ad9190610e8f565b60405180910390f35b6100be6101a5565b6040516100ad9190610e23565b6100be6101c9565b6100be6101ed565b6100be610211565b6100be610235565b6100fe6100f9366004610d05565b610259565b6040516100ad9190610e44565b61011e610119366004610c74565b610317565b005b6000805b838110156101975760006101598787878581811061013e57fe5b90506020020160208101906101539190610be2565b8661057b565b9050600181600281111561016957fe5b14806101805750600281600281111561017e57fe5b145b1561018e57915061019d9050565b50600101610124565b50600090505b949350505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60608467ffffffffffffffff8111801561027257600080fd5b5060405190808252806020026020018201604052801561029c578160200160208202803683370190505b50905060005b8581101561030d576102d68787838181106102b957fe5b90506020020160208101906102ce9190610be2565b868686610120565b8282815181106102e257fe5b602002602001019060028111156102f557fe5b9081600281111561030257fe5b9052506001016102a2565b5095945050505050565b60003390506000808273ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561036557600080fd5b505afa158015610379573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039d9190610bfe565b8373ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156103e357600080fd5b505afa1580156103f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041b9190610bfe565b91509150600080881161042e5781610430565b825b905060008061044187890189610d8e565b915091506000828473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016104819190610e23565b60206040518083038186803b15801561049957600080fd5b505afa1580156104ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d19190610d76565b03905081811461054957604080518082018252600381527f464f540000000000000000000000000000000000000000000000000000000000602082015290517f08c379a00000000000000000000000000000000000000000000000000000000081526105409190600401610ea3565b60405180910390fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054090610eb6565b60008273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156105b95750600061093a565b60006106433073ffffffffffffffffffffffffffffffffffffffff16633957f4536040518163ffffffff1660e01b815260040160206040518083038186803b15801561060457600080fd5b505afa158015610618573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063c9190610bfe565b8686610941565b60408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f0dfe168100000000000000000000000000000000000000000000000000000000179052905191925060009173ffffffffffffffffffffffffffffffffffffffff8416916106c291610e07565b6000604051808303816000865af19150503d80600081146106ff576040519150601f19603f3d011682016040523d82523d6000602084013e610704565b606091505b5091505080516000141561071d5760009250505061093a565b6000818060200190518101906107339190610bfe565b90506000808273ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161461077357600087610777565b8660005b9150915060008973ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107b69190610e23565b60206040518083038186803b1580156107ce57600080fd5b505afa1580156107e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108069190610d76565b905060008690508073ffffffffffffffffffffffffffffffffffffffff1663022c0d9f858530868e60405160200161083f929190610f24565b6040516020818303038152906040526040518563ffffffff1660e01b815260040161086d9493929190610f32565b600060405180830381600087803b15801561088757600080fd5b505af1925050508015610898575060015b610908576108a4610fad565b806108af57506108fe565b6108b881610a2c565b156108ce5760019850505050505050505061093a565b6108d781610a8f565b156108ed5760029850505050505050505061093a565b60009850505050505050505061093a565b3d6000803e3d6000fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054090610eed565b9392505050565b60008060006109508585610afb565b604080517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606094851b811660208084019190915293851b81166034830152825160288184030181526048830184528051908501207fff0000000000000000000000000000000000000000000000000000000000000060688401529a90941b9093166069840152607d8301989098527fdba94e407c3f312e94bf26f381b24ddafdbf4a893f71c30222e2b14c7eeaba07609d808401919091528851808403909101815260bd909201909752805196019590952095945050505050565b60408051808201909152600381527f464f5400000000000000000000000000000000000000000000000000000000006020918201528151908201207f0d441c7cb74abc94cc606c98870ca9174ef5b167b2f7ffed505658cf4574b003145b919050565b60408051808201909152600f8082527f5452414e534645525f4641494c45440000000000000000000000000000000000602083015282516000929180821015610ade5760009350505050610a8a565b602092830181902091819003850190920191909120149050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610b3757600080fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1610610b71578284610b74565b83835b909250905073ffffffffffffffffffffffffffffffffffffffff8216610b9957600080fd5b9250929050565b60008083601f840112610bb1578182fd5b50813567ffffffffffffffff811115610bc8578182fd5b6020830191508360208083028501011115610b9957600080fd5b600060208284031215610bf3578081fd5b813561093a8161108f565b600060208284031215610c0f578081fd5b815161093a8161108f565b60008060008060608587031215610c2f578283fd5b8435610c3a8161108f565b9350602085013567ffffffffffffffff811115610c55578384fd5b610c6187828801610ba0565b9598909750949560400135949350505050565b600080600080600060808688031215610c8b578081fd5b8535610c968161108f565b94506020860135935060408601359250606086013567ffffffffffffffff80821115610cc0578283fd5b818801915088601f830112610cd3578283fd5b813581811115610ce1578384fd5b896020828501011115610cf2578384fd5b9699959850939650602001949392505050565b600080600080600060608688031215610d1c578081fd5b853567ffffffffffffffff80821115610d33578283fd5b610d3f89838a01610ba0565b90975095506020880135915080821115610d57578283fd5b50610d6488828901610ba0565b96999598509660400135949350505050565b600060208284031215610d87578081fd5b5051919050565b60008060408385031215610da0578182fd5b50508035926020909101359150565b60008151808452610dc7816020860160208601610f77565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60038110610e0357fe5b9052565b60008251610e19818460208701610f77565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b6020808252825182820181905260009190848201906040850190845b81811015610e8357610e73838551610df9565b9284019291840191600101610e60565b50909695505050505050565b60208101610e9d8284610df9565b92915050565b60006020825261093a6020830184610daf565b60208082526007908201527f556e6b6e6f776e00000000000000000000000000000000000000000000000000604082015260600190565b60208082526010908201527f556e6578706563746564206572726f7200000000000000000000000000000000604082015260600190565b918252602082015260400190565b600085825284602083015273ffffffffffffffffffffffffffffffffffffffff8416604083015260806060830152610f6d6080830184610daf565b9695505050505050565b60005b83811015610f92578181015183820152602001610f7a565b83811115610fa1576000848401525b50505050565b60e01c90565b600060443d1015610fbd5761108c565b600481823e6308c379a0610fd18251610fa7565b14610fdb5761108c565b6040517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3d016004823e80513d67ffffffffffffffff8160248401118184111715611029575050505061108c565b82840192508251915080821115611043575050505061108c565b503d8301602082840101111561105b5750505061108c565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01681016020016040529150505b90565b73ffffffffffffffffffffffffffffffffffffffff811681146110b157600080fd5b5056fea264697066735822122079f5322e838e410465bcb32e660862b379e671181d0b46d85011e584ddb320d264736f6c63430007060033";

export class TokenValidator__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _factoryV1: string,
    _positionManager: string,
    _refWalletFactory: string,
    _checkValidation: string,
    _JAMM_Token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TokenValidator> {
    return super.deploy(
      _factoryV1,
      _positionManager,
      _refWalletFactory,
      _checkValidation,
      _JAMM_Token,
      overrides || {}
    ) as Promise<TokenValidator>;
  }
  getDeployTransaction(
    _factoryV1: string,
    _positionManager: string,
    _refWalletFactory: string,
    _checkValidation: string,
    _JAMM_Token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _factoryV1,
      _positionManager,
      _refWalletFactory,
      _checkValidation,
      _JAMM_Token,
      overrides || {}
    );
  }
  attach(address: string): TokenValidator {
    return super.attach(address) as TokenValidator;
  }
  connect(signer: Signer): TokenValidator__factory {
    return super.connect(signer) as TokenValidator__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenValidatorInterface {
    return new utils.Interface(_abi) as TokenValidatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenValidator {
    return new Contract(address, _abi, signerOrProvider) as TokenValidator;
  }
}
